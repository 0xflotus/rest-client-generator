<%
  var responseType = 'void';
  if (method.responseMediaType === 'application/json') {
    responseType = method.responseType;
  } else if (method.responseMediaType === 'text/plain') {
    responseType = 'string';
  }

  var requestType = null;
  if (method.requestMediaType === 'application/json') {
    requestType = method.requestType;
  } else if (method.requestMediaType === 'text/plain') {
    requestType = 'string';
  }

  var params = (method.pathParams || []).concat(method.queryParams || []);

  var argsVars = params.map(function(pathParam) {
    return pathParam.name + ' : ' + pathParam.type;
  });

  if (requestType) {
    argsVars.push('_req : ' + requestType);
  }
%>

public <%- method.name %>(<%- argsVars.join(', ') %>): Promise<<%- responseType %>>{
    var _url: string = '<%- method.path %>';
    <% if (method.pathParams) { %>
        _url = substitudeUrl(_url, {<%- method.pathParams.map(function(param) { return param.name; }).join(', '); %>});
    <% } %>
    <% if (requestType) { %>
      var _body: string = JSON.stringify(_req);
    <% } else if (method.queryParams) { %>
      var _params: string = encodeParams({<%- method.queryParams.map(function(param) { return param.name; }).join(', '); %>});
        <% if (method.method !== 'GET') { %>
          var _body = _params;
        <% } else { %>
          _url += '?' + _params;
        <% } %>
    <% } else if (method.method !== 'GET') { %>
      var _body: string = '';
    <% } %>
    return new Promise<<%- responseType %>>((_resolve, _reject) => {
        this.http.<%- method.method.toLowerCase() %>(_url, <% if (method.method !== 'GET') { %>_body, <% }
        %> getRequestOptions('<%- method.requestMediaType || '*/*' -%>', '<%- method.responseMediaType || '*/*' %>')).subscribe(_res => {
            <% if (method.responseMediaType === 'application/json') { %>
                _resolve(_res.text() ? _res.json() : null);
            <% } else if (method.responseMediaType === 'text/plain') { %>
                _resolve(_res.text());
            <% } else { %>
                _resolve();
            <% } %>
        }, _err => {
            _reject(_err);
        });
    });
}
