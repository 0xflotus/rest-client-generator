<%
  function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
  }

  var responseType = 'void';
  if (method.responseMediaType) {
    switch (method.responseMediaType) {
      case 'text/plain':
        responseType = 'string';
        break;
      case 'application/json':
        responseType = method.responseType || 'any';
        break;
      case 'application/octet-stream':
        responseType = 'File';
        break;
      default:
        responseType = 'ArrayBuffer';
    }
  }

  var requestType = null;
  if (method.requestMediaType) {
    if (method.requestMediaType === 'application/json') {
      requestType = method.requestType;
    }
  }

  var params = (method.pathParams || []).concat(method.queryParams || []).concat(method.formParams || []);

  var argsVars = params.map(function(pathParam) {
    return pathParam.name + ': ' + pathParam.type;
  });

  if (requestType) {
    argsVars.push(varPfx + 'request : ' + requestType);
  }
%>

public <%- method.name %>(<%- argsVars.join(', ') %>): Observable<<%- responseType %>>{
    const <%- varPfx %>headers = new HttpHeaders({
        'Accept': '<%- method.responseMediaType || '*/*' %>'<% if (method.requestMediaType) { %>,
        'Content-Type': '<%- method.requestMediaType %>'
        <% } %>
    });
    <% if (method.queryParams) { %>
        const <%- varPfx %>params = new HttpParams({
            fromObject: {
                <% method.queryParams.forEach(function (param, index) { %>
                '<%- param.name %>': this.<%- varPfx %>toString(<%- param.name %>)<%- index !== method.queryParams.length - 1 ? ',' : '' %>
                <% }); %>
            }
        });
    <% } %>
    <% if (method.formParams) { %>
        const <%- varPfx %>body = new HttpParams({
            fromObject: {
                <% method.formParams.forEach(function (param, index) { %>
                '<%- param.name %>': this.<%- varPfx %>toString(<%- param.name %>)<%- index !== method.formParams.length - 1 ? ',' : '' %>
                <% }); %>
            }
        });
    <% } %>
    return this.<%- varPfx %>http.<%- method.method.toLowerCase() %>(`${this.<%- varPfx %>rootUrl}<%- method.path.replace(/{/g,'${') %>`,
        <% if (method.method !== 'GET') { %>
          <% if (method.formParams) { %>
            <%- varPfx %>body,
          <% } else if (requestType) { %>
            <%- varPfx %>request,
          <% } else { %>
            null,
          <% } %>
        <% } %> {
        observe: 'response',
        <% if (responseType === 'ArrayBuffer') { %>
            responseType: 'arraybuffer',
        <% } else if (responseType === 'File') { %>
            responseType: 'blob',
        <% } else { %>
            responseType: 'text',
        <% } %>
        <% if (method.queryParams) { %>
        params: <%- varPfx %>params,
        <% } %>
        headers: <%- varPfx %>headers
    })
    <% if (responseType === 'void') { %>
      .map(() => {});
    <% } else if (responseType === 'string') { %>
      .map((<%- varPfx %>res: HttpResponse<string>) => <%- varPfx %>res.body);
    <% } else if (responseType === 'ArrayBuffer') { %>
      .map((<%- varPfx %>res: HttpResponse<ArrayBuffer>) => <%- varPfx %>res.body);
    <% } else if (responseType === 'File') { %>
      .map(this.<%- varPfx %>toFile);
    <% } else { %>
      .map(this.<%- varPfx %>toObject);
    <% } %>
}
