/**
 * Generated REST client by rest-client-generator
 * <%- new Date() %>
 */
/* tslint:disable */
import {
  Injectable,
  InjectionToken,
  Inject,
  NgModule
} from '@angular/core';
import {
  HttpClientModule,
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse
} from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

/**
 * Configuration stuff.
 */
export const SERVICE_ROOT_URL = new InjectionToken<string>('service-root-url');
export const SERVICE_JSON_DATE_PATTERN = new InjectionToken<string>('service-json-date-pattern');

/**
 * Some internal stuff.
 */
class <%- varPfx %>BaseService {
    private <%- varPfx %>dateRegExp: RegExp;
    constructor(jsonDatePattern: string) {
        this.<%- varPfx %>dateRegExp = new RegExp(jsonDatePattern);
    }
    private <%- varPfx %>dateReviver = (key: string, value: any): any => {
        if (typeof value === 'string' && this.<%- varPfx %>dateRegExp.test(value)) {
            value = new Date(value);
        }
        return value;
    }
    protected <%- varPfx %>toObject = (response: HttpResponse<string>): any => {
        return response.body ? JSON.parse(response.body, this.<%- varPfx %>dateReviver) : null;
    }
    protected <%- varPfx %>toFile = (response: HttpResponse<Blob>): File => {
        let fileName = 'download.bin';
        const matches = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(response.headers.get('content-disposition'));
        if (matches != null && matches[1]) {
            fileName = matches[1].replace(/['"]/g, '');
        }
        return new File([response.body], fileName, {
            type: response.body.type,
            lastModified: new Date(response.headers.get('last-modified')).getTime()
        });
    }
    protected <%- varPfx %>toString(value: any): string {
        if (value !== null && value !== undefined && typeof value !== 'string') {
            value = value.toString();
        }
        return value;
    }
}

/**
 * Request/response types and enumerations.
 */
<% types.forEach(function(type) { %>
    <%- include('type-' + type.type, {type: type}) %>
<% }); %>

/**
 * Services stuff.
 */

<% services.forEach(function(service) { %>
    <%- include('service', {service: service, rootUrl: rootUrl, varPfx: varPfx}) %>
<% }); %>

/**
 * The module with all services.
 */
@NgModule({
  imports: [
    HttpClientModule
  ],
  providers: [
    { provide: SERVICE_ROOT_URL, useValue: '<%- rootUrl %>' },
    { provide: SERVICE_JSON_DATE_PATTERN, useValue: '\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?' },
    // accept: YYYY-MM-DDThh:mm:ss, YYYY-MM-DDThh:mm:ssTZD, YYYY-MM-DDThh:mm:ss.sTZD
    <%- services.map(function (service) { return service.name; }).join(',\n'); %>
  ]
})
export class <%- moduleName %> {
}
