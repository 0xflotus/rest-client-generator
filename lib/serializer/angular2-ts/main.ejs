/**
 * Generated stuff...
 */
import {Injectable, EventEmitter} from '@angular/core';
import {Http, Headers, Request, RequestMethod, RequestOptions, Response} from '@angular/http';

import { Observable } from 'rxjs';
import 'rxjs/add/operator/map';

/**
 * Configuration stuff.
 */
@Injectable()
export class ServiceConfig {
    public rootUrl: string = '<%- rootUrl %>';
    public request: EventEmitter<Request> = new EventEmitter<Request>();
    public response: EventEmitter<Response> = new EventEmitter<Response>();
}

/**
 * Request and response types and enumerations.
 */
<% types.forEach(function(type) { %>
    <%- include('type-' + type.type, {type: type}) %>
<% }); %>


/**
 * Services stuff.
 */
<% services.forEach(function(service) { %>
    <%- include('service', {service: service, rootUrl: rootUrl, varPfx: varPfx}) %>
<% }); %>

/**
 * Providers for using services.
 */
export const SERVICE_PROVIDERS: any[] = [ServiceConfig, <%- services.map(function (service) { return service.name; }).join(', '); %>];

/**
 * Some private methods.
 */
function substitudeUrl(url: string, values: Object): string {
    Object.keys(values).map(key => {
        url = url.replace('{' + encodeURIComponent(key) + '}', encodeURIComponent(values[key]));
    });
    return url;
}

function encodeParams(values: Object): string {
    return Object.keys(values).map(key => {
      return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]);
    }).join('&');
}
