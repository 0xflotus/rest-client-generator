/**
 * Generated REST client by rest-client-generator
 * <%- new Date() %>
 */
import {
  Injectable,
  InjectionToken,
  Inject,
  NgModule
} from '@angular/core';
import {
  HttpModule,
  Http,
  Headers,
  RequestMethod,
  RequestOptionsArgs,
  Response,
  ResponseContentType
} from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

/**
 * Configuration stuff.
 */
export const SERVICE_ROOT_URL = new InjectionToken<string>('service-root-url');
export const SERVICE_JSON_DATE_PATTERN = new InjectionToken<string>('service-json-date-pattern');

/**
 * Some internal stuff.
 */
@Injectable()
export class ObjectParser {
  private dateRegExp: RegExp;
  constructor(@Inject(SERVICE_JSON_DATE_PATTERN) jsonDatePattern: string) {
    this.dateRegExp = new RegExp(jsonDatePattern);
  }
  private dateReviver(key: string, value: any): any {
    if (typeof value === 'string' && this.dateRegExp.test(value)) {
      value = new Date(value);
    }
    return value;
  }
  toObject<T>(response: Response): T {
    let str = response.text();
    return str ? JSON.parse(str, this.dateReviver.bind(this)) as T : null;
  }
}

function substituteUrl(url: string, values: Object): string {
  Object.keys(values).map(key => {
    url = url.replace('{' + encodeURIComponent(key) + '}', encodeURIComponent(values[key]));
  });
  return url;
}

function encodeParams(values: Object): string {
  return Object.keys(values).map(key => {
    return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]);
  }).join('&');
}

function toFile(response: Response): File {
  let fileName: string = 'download.bin';
  let matches = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(response.headers.get('content-disposition'));
  if (matches != null && matches[1]) {
    fileName = matches[1].replace(/['"]/g, '');
  }

  let blob: Blob = response.blob();

  return new File([blob], fileName, {
    type: blob.type,
    lastModified: new Date(response.headers.get('last-modified')).getTime()
  });
}

/**
 * Request/response types and enumerations.
 */
<% types.forEach(function(type) { %>
    <%- include('type-' + type.type, {type: type}) %>
<% }); %>

/**
 * Services stuff.
 */
<% services.forEach(function(service) { %>
    <%- include('service', {service: service, rootUrl: rootUrl, varPfx: varPfx}) %>
<% }); %>

/**
 * The module with all services.
 */
@NgModule({
  imports: [
    HttpModule
  ],
  providers: [
    { provide: SERVICE_ROOT_URL, useValue: '<%- rootUrl %>' },
    { provide: SERVICE_JSON_DATE_PATTERN, useValue: '\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?' },
    // accept: YYYY-MM-DDThh:mm:ss, YYYY-MM-DDThh:mm:ssTZD, YYYY-MM-DDThh:mm:ss.sTZD
    ObjectParser,
    <%- services.map(function (service) { return service.name; }).join(',\n'); %>
  ]
})
export class <%- moduleName %> {
}
