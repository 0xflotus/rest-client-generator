/**
 * Generated REST client by rest-client-generator
 * <%- new Date() %>
 */
import { Injectable, OpaqueToken, Inject, NgModule } from '@angular/core';
import { HttpModule, Http, Headers, Request, RequestMethod, RequestOptions, Response } from '@angular/http';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/map';

/**
 * Configuration stuff.
 */
export const SERVICE_ROOT_URL = new OpaqueToken('service-root-url');
export const SERVICE_JSON_DATE_PATTERN =  new OpaqueToken('service-json-date-pattern');

/**
 * Some internal stuff.
 */
@Injectable()
class ServiceUtil {
  constructor(@Inject(SERVICE_JSON_DATE_PATTERN) private jsonDatePattern: RegExp) {
  }
  private dateReviver(key: string, value: any): any {
    if (typeof value === 'string' && this.jsonDatePattern.test(value)) {
      value = new Date(value);
    }
    return value;
  }
  toObject(response: Response): any {
    var str = response.text();
    return str ? JSON.parse(str, this.dateReviver.bind(this)) : null;
  }
  substitudeUrl(url: string, values: Object): string {
    Object.keys(values).map(key => {
      url = url.replace('{' + encodeURIComponent(key) + '}', encodeURIComponent(values[key]));
    });
    return url;
  }
  encodeParams(values: Object): string {
    return Object.keys(values).map(key => {
      return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]);
    }).join('&');
  }
}
/**
 * Request/response types and enumerations.
 */
<% types.forEach(function(type) { %>
    <%- include('type-' + type.type, {type: type}) %>
<% }); %>

/**
 * Services stuff.
 */
<% services.forEach(function(service) { %>
    <%- include('service', {service: service, rootUrl: rootUrl, varPfx: varPfx}) %>
<% }); %>

/**
 * The module with all services.
 */
@NgModule({
  imports: [
    HttpModule
  ],
  providers: [
    { provide: SERVICE_ROOT_URL, useValue: '<%- rootUrl %>' },
    { provide: SERVICE_JSON_DATE_PATTERN, useValue: /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i }, //accept: YYYY-MM-DDThh:mm:ss, YYYY-MM-DDThh:mm:ssTZD, YYYY-MM-DDThh:mm:ss.sTZD
    ServiceUtil,
    <%- services.map(function (service) { return service.name; }).join(',\n'); %>
  ]
})
export class <%- moduleName %> {
}
